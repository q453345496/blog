package ${packageName}.service;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.baomidou.mybatisplus.mapper.EntityWrapper;
import com.baomidou.mybatisplus.mapper.Wrapper;
import com.baomidou.mybatisplus.plugins.Page;
import ${packageName}.common.DataGridResult;
import ${packageName}.dao.${ModelDao};
<%if(isTree){%>
import ${packageName}.exception.CheckException;
<%}%>
import ${packageName}.model.${Model};

@Service
@Transactional
public class ${ModelService} {

	@Resource
	private ${Model}Dao ${modelDao};

	public List<${Model}> list(Wrapper<${Model}> wrapper) {
		return ${modelDao}.selectList(wrapper);
	}

	public DataGridResult page(Page<${Model}> page, Wrapper<${Model}> wrapper) {
		DataGridResult vo = new DataGridResult();
		List<${Model}> datas = ${modelDao}.selectPage(page, wrapper);
		vo.setTotal(page.getTotal());
		vo.setRows(datas);
		return vo;
	}

	public int update(${Model} ${model}) {
		return ${modelDao}.updateById(${model});
	}

	public int save(${Model} ${model}) {
		<%if(isTree){%>
		${Model} parent = ${modelDao}.selectById(${model}.getParentId());
		if (!parent.getParent()) {
			parent.setParent(true);
			${modelDao}.updateById(parent);
		}
		${model}.setParent(false);
		<%}%>
		return ${modelDao}.insert(${model});
	}

	<%if(isTree){%>
	public void delete(Long id) {
		${Model} ${model} = ${modelDao}.selectById(id);
		if (${model} != null) {
			if (${model}.getParent()) {
				throw new CheckException("该节点存在子节点，无法删除");
			}
			if (-1 == ${model}.getParentId()) {
				throw new CheckException("根节点无法删除");
			}
			${modelDao}.deleteById(id);
			int subCount = getSubCount(${model}.getParentId());
			if (subCount == 0) {
				${Model} parent = new ${Model}();
				parent.setId(${model}.getParentId());
				parent.setParent(false);
				${modelDao}.updateById(parent);
			}
		}
	}
	<%} else {%>
	public int delete(Long id) {
		return ${modelDao}.deleteById(id);
	}
	<%}%>

	public int delete(Long[] ids) {
		return ${modelDao}.deleteBatchIds(Arrays.asList(ids));
	}

	public ${Model} get(Long id) {
		return ${modelDao}.selectById(id);
	}
	
	<%if(isTree){%>
	public int getSubCount(Long parentId) {
		return ${modelDao}.selectCount(new EntityWrapper<${Model}>().eq("parent_id", parentId));
	}
	<%}%>
}
