package ${packageName}.controller${manager ? ".manager" : "" };

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import ${packageName}.common.CommonResult;
<%if(!isTree){%>
import ${packageName}.common.DataGridResult;
import ${packageName}.common.Page;
<%}%>
import ${packageName}.model.${Model};
import ${packageName}.service.${ModelService};

@Controller
@RequestMapping("${requestMapping}")
public class ${ModelController} {
	@Resource
	private ${ModelService} ${modelService};

	<%if(isTree){%>
	@RequestMapping(value = "/tree", method = RequestMethod.GET)
	@ResponseBody
	public List<${Model}> tree(@RequestParam(value = "id", required = false, defaultValue = "-1") Long parentId) {
		Map<String, Object> map = new HashMap<>();
		map.put("parentId", parentId);
		List<${Model}> list = ${modelService}.list(map);
		return list;
	}
	<%} else {%>
	@RequestMapping(value = "/list", method = RequestMethod.GET)
	@ResponseBody
	public DataGridResult list(@RequestParam(value = "page", required = false) Integer page,
			@RequestParam(value = "rows", required = false) Integer rows, ${Model} ${model}) {
		Page p = new Page(page, rows);
		Map<String, Object> map = new HashMap<>();
		map.put("start", p.getStart());
		map.put("size", p.getPageSize());
		return ${modelService}.page(map);
	}
	<%}%>

	@RequestMapping(value = "/save", method = RequestMethod.POST)
	@ResponseBody
	public CommonResult save(${Model} ${model}) {
		${modelService}.save(${model});
		return CommonResult.success(${model}.getId());
	}

	@RequestMapping(value = "/update", method = RequestMethod.POST)
	@ResponseBody
	public CommonResult update(${Model} ${model}) {
		${modelService}.update(${model});
		return CommonResult.success();
	}

	@RequestMapping(value = "/{id}", method = RequestMethod.GET)
	@ResponseBody
	public CommonResult detail(@PathVariable("id") Long id) {
		${Model} ${model} = ${modelService}.get(id);
		return CommonResult.success(${model});
	}
	
	@RequestMapping(value = "/delete", method = RequestMethod.POST)
	@ResponseBody
	public CommonResult delete(@RequestParam(value = "id", required = true) Long[] ids) {
		${modelService}.delete(ids);
		return CommonResult.success();
	}
}
